!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.zoomVisualizer=t():e.zoomVisualizer=t()}(this,(()=>(()=>{"use strict";var e={};(e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})})(e);var t=0,n=performance.now(),o=0;function i(e){t++;var r=performance.now(),a=r-n;a>=150&&(o=Math.round(t/a*1e3),t=0,n=r),e.font="20px Arial",e.fillStyle="white",e.fillText("FPS: ".concat(o),10,30),requestAnimationFrame((function(){return i(e)}))}var r=50,a=50,u=null;function f(e){var t=e.canvas.width/2,n=e.canvas.height/2;e.strokeStyle="#ffff00",e.lineWidth=2,e.beginPath(),e.moveTo(t-30,n),e.lineTo(t+30,n),e.stroke(),r+=.9*(a-r);var o=Math.abs(r-50)*e.canvas.height/100;e.fillStyle=r<50?"#00ff00":"#ff0000";var i=r<50?e.canvas.height/2-o:e.canvas.height/2;e.fillRect(t-20,i,40,o),requestAnimationFrame((function(){return f(e)}))}var c=document.createElement("canvas");c.id="visualization-canvas",c.width=100,c.height=300,c.style.position="fixed",c.style.right="0",c.style.top="50%",c.style.transform="translateY(-50%)",c.style.backgroundColor="#184357",c.style.border="1px solid #2f6e8c",document.body.appendChild(c);var l,s=c.getContext("2d");if(!s)throw new Error("Unable to get canvas rendering context");function d(e){e.clearRect(0,0,c.width,c.height),requestAnimationFrame((function(){return d(e)}))}return function(e){requestAnimationFrame((function(){return d(e)}))}(s),function(e){requestAnimationFrame((function(){return f(e)}))}(s),function(e){requestAnimationFrame((function(){return i(e)}))}(s),window.addEventListener("wheel",(function(e){var t;e.preventDefault(),t=e.deltaY,a+=t/180*100,a=Math.max(0,Math.min(100,a)),u&&clearTimeout(u),u=setTimeout((function(){a=50}),15)}),{passive:!1}),l=function(){},"complete"!==document.readyState&&window.addEventListener("load",(function(){return l&&void 0})),e})()));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,